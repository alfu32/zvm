#!/bin/bash
CATALOG_URL="https://ziglang.org/download/index.json"
AUTOUPDATE_URL="https://raw.githubusercontent.com/alfu32/zvm/main/zvm"
BUILDS="https://ziglang.org/builds/"
CDIR=`pwd`
P_COMMAND=$1
P_VERSION=$2
P_ARCH=$3
PROC_ARCH=`uname -m`
SYS_ARCH=$(uname | tr '[:upper:]' '[:lower:]')
needed_archsys="$PROC_ARCH-$SYS_ARCH"
if [ "$ZIG_HOME" == "" ]
then
    export ZIG_HOME=~/.zig
    echo "ZIG_HOME environment variable not found"
    echo "setting ZIG_HOME to default $ZIG_HOME"
    else
    echo "found ZIG_HOME at $ZIG_HOME"
fi

# echo "
#         P_VERSION =  $P_VERSION
#            P_ARCH =  $P_ARCH
# "
all_releases="available releases"
all_architectures="available system architecure builds (yours is $needed_archsys)"
found_release=""
found_architecture=""
found_json=""
function get_data () {
    if test -f CATALOG.json 
    then
        echo using local catalog
        else
        echo downloading release catalog from $CATALOG_URL
        curl -s -m 5 $CATALOG_URL -o CATALOG.json
    fi

    for releaseName in `jq 'keys[]' CATALOG.json`
    do
        RELEASE=`jq ".$releaseName" CATALOG.json`
        name=`tr -d '"' <<< $releaseName`
        date=`jq ".date" <<< $RELEASE`
        docs=`jq ".docs" <<< $RELEASE`
        src=`jq ".src" <<< $RELEASE`
        stddocs=`jq ".stddocs" <<< $RELEASE`
        version=`jq ".version" <<< $RELEASE`

        # echo $RELEASE
        if [ "$name" = "$P_VERSION" ]
        then
            all_releases="$all_releases
            - $(printf %10s $name) (selected) [$0 available $name]"
            #echo $RELEASE
            found_release=$name
            all_architectures="$all_architectures for release $name"
            #else
                #echo "$name != $P_VERSION"
            ARCH="     "
            for archRef in `jq 'keys[]' <<< $RELEASE`
            do
                arch=`tr -d '"' <<< $archRef`
                case $arch in
                    notes)
                    ;;
                    date)
                    ;;
                    docs)
                    ;;
                    src)
                    ;;
                    stdDocs)
                    ;;
                    version)
                    ;;
                    *)
                        ARCH="$ARCH $arch"
                        if [ "$arch" = "$needed_archsys" ]
                        then
                            all_architectures="$all_architectures
                            - $(printf %20s $arch) (yours) [$0 install $name $arch]"
                            else
                            all_architectures="$all_architectures
                            - $(printf %20s $arch)         [$0 install $name $arch]"
                        fi
                        if [ "$arch" = "$P_ARCH" ]
                        then
                            found_architecture=$arch
                            echo "FOUND : $found_release / $found_architecture"
                            echo "RELEASE : $RELEASE"
                            found_json=`jq ".$archRef" <<< $RELEASE`
                            echo "DETAILS : $found_json"
                        fi
                    ;;
                esac
            done
            else
            all_releases="$all_releases
            - $(printf %10s $name)            [$0 available $name]"
        fi
    ###    echo "
    ###---- ZIG RELEASE $name version:$version date:$date docs:$docs std documentation:$stddocs-------
    ###     $ARCH
    ###    "
    done
}
function install () {

    cd $ZIG_HOME
    echo "installing $found_release for $found_architecture in $ZIG_HOME"
    echo "$found_json"
    tarball=`jq '.tarball' <<< $found_json`
    tarball=`tr -d '"' <<< $tarball`
    # wget $tarball > 
    filename=$(basename $tarball)
    echo "filename : $filename"
    dirname=`basename -- "$filename"`
    extension="${dirname##*.}"
    dirname="${dirname%.*}"
    dirname="${dirname%.*}"
    if test -f "$filename"
    then
        echo found file $filename
    else
        echo "downloading $tarball > $filename"
        wget $tarball
    fi
    if test -f "$dirname"
    then
        echo remove existing installation $dirname
        rm -rf $dirname
    fi
    echo "untar  $filename in $dirname"
    tar xf $filename
    rm -rf zig
    rm -rf $dirname.run
    ln -s $dirname/zig $dirname.run
    ln -s $dirname.run zig
    cd $CDIR
    zig version
}
case $P_COMMAND  in
    install)
        get_data
        if [ "$found_architecture" = "" ]
        then
            if [ "$found_release" = "" ]
            then
                echo "release $P_VERSION not found
                $all_releases"
            else
                echo "$all_architectures"
                echo "$all_releases"
            fi
        else
            install
        fi
    ;;
    available)
        ls -la $ZIG_HOME
        get_data
        echo "$all_architectures"
        echo "$all_releases"
    ;;
    autoupdate)
        cd $ZIG_HOME
        STAMP=$(date +'%Y%m%d')
        echo $STAMP
        rm -rf zvm.$STAMP.old
        mv zvm zvm.$STAMP.old
        echo downloading upstream version from $AUTOUPDATE_URL
        curl -s -m 5 $AUTOUPDATE_URL -o zvm
        chmod +x zvm
        cd $CDIR
    ;;
    *)
        echo "commands :
        install         installs the specified version and architecture
        available       lists all avalable versions and system architectures
        autoupdate      zvm updates itself
        "
    ;;
esac

